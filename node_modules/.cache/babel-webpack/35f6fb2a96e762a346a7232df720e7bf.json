{"ast":null,"code":"'use strict';\n\nvar DOM = require('./dom.js');\n\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n}\n\nmodule.exports = {\n  // those methods are implemented differently\n  // depending on which build it is, using\n  // $... or angular... or Zepto... or require(...)\n  isArray: null,\n  isFunction: null,\n  isObject: null,\n  bind: null,\n  each: null,\n  map: null,\n  mixin: null,\n  isMsie: function isMsie(agentString) {\n    if (agentString === undefined) {\n      agentString = navigator.userAgent;\n    } // from https://github.com/ded/bowser/blob/master/bowser.js\n\n\n    if (/(msie|trident)/i.test(agentString)) {\n      var match = agentString.match(/(msie |rv:)(\\d+(.\\d+)?)/i);\n\n      if (match) {\n        return match[2];\n      }\n    }\n\n    return false;\n  },\n  // http://stackoverflow.com/a/6969486\n  escapeRegExChars: function escapeRegExChars(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n  },\n  isNumber: function isNumber(obj) {\n    return typeof obj === 'number';\n  },\n  toStr: function toStr(s) {\n    return s === undefined || s === null ? '' : s + '';\n  },\n  cloneDeep: function cloneDeep(obj) {\n    var clone = this.mixin({}, obj);\n    var self = this;\n    this.each(clone, function (value, key) {\n      if (value) {\n        if (self.isArray(value)) {\n          clone[key] = [].concat(value);\n        } else if (self.isObject(value)) {\n          clone[key] = self.cloneDeep(value);\n        }\n      }\n    });\n    return clone;\n  },\n  error: function error(msg) {\n    throw new Error(msg);\n  },\n  every: function every(obj, test) {\n    var result = true;\n\n    if (!obj) {\n      return result;\n    }\n\n    this.each(obj, function (val, key) {\n      if (result) {\n        result = test.call(null, val, key, obj) && result;\n      }\n    });\n    return !!result;\n  },\n  any: function any(obj, test) {\n    var found = false;\n\n    if (!obj) {\n      return found;\n    }\n\n    this.each(obj, function (val, key) {\n      if (test.call(null, val, key, obj)) {\n        found = true;\n        return false;\n      }\n    });\n    return found;\n  },\n  getUniqueId: function () {\n    var counter = 0;\n    return function () {\n      return counter++;\n    };\n  }(),\n  templatify: function templatify(obj) {\n    if (this.isFunction(obj)) {\n      return obj;\n    }\n\n    var $template = DOM.element(obj);\n\n    if ($template.prop('tagName') === 'SCRIPT') {\n      return function template() {\n        return $template.text();\n      };\n    }\n\n    return function template() {\n      return String(obj);\n    };\n  },\n  defer: function defer(fn) {\n    setTimeout(fn, 0);\n  },\n  noop: function noop() {},\n  formatPrefix: function formatPrefix(prefix, noPrefix) {\n    return noPrefix ? '' : prefix + '-';\n  },\n  className: function className(prefix, clazz, skipDot) {\n    return (skipDot ? '' : '.') + prefix + clazz;\n  },\n  escapeHighlightedString: function escapeHighlightedString(str, highlightPreTag, highlightPostTag) {\n    highlightPreTag = highlightPreTag || '<em>';\n    var pre = document.createElement('div');\n    pre.appendChild(document.createTextNode(highlightPreTag));\n    highlightPostTag = highlightPostTag || '</em>';\n    var post = document.createElement('div');\n    post.appendChild(document.createTextNode(highlightPostTag));\n    var div = document.createElement('div');\n    div.appendChild(document.createTextNode(str));\n    return div.innerHTML.replace(RegExp(escapeRegExp(pre.innerHTML), 'g'), highlightPreTag).replace(RegExp(escapeRegExp(post.innerHTML), 'g'), highlightPostTag);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}