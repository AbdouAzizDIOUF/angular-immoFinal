{"ast":null,"code":"'use strict';\n\nvar specialKeyCodeMap;\nspecialKeyCodeMap = {\n  9: 'tab',\n  27: 'esc',\n  37: 'left',\n  39: 'right',\n  13: 'enter',\n  38: 'up',\n  40: 'down'\n};\n\nvar _ = require('../common/utils.js');\n\nvar DOM = require('../common/dom.js');\n\nvar EventEmitter = require('./event_emitter.js'); // constructor\n// -----------\n\n\nfunction Input(o) {\n  var that = this;\n  var onBlur;\n  var onFocus;\n  var onKeydown;\n  var onInput;\n  o = o || {};\n\n  if (!o.input) {\n    _.error('input is missing');\n  } // bound functions\n\n\n  onBlur = _.bind(this._onBlur, this);\n  onFocus = _.bind(this._onFocus, this);\n  onKeydown = _.bind(this._onKeydown, this);\n  onInput = _.bind(this._onInput, this);\n  this.$hint = DOM.element(o.hint);\n  this.$input = DOM.element(o.input).on('blur.aa', onBlur).on('focus.aa', onFocus).on('keydown.aa', onKeydown); // if no hint, noop all the hint related functions\n\n  if (this.$hint.length === 0) {\n    this.setHint = this.getHint = this.clearHint = this.clearHintIfInvalid = _.noop;\n  } // ie7 and ie8 don't support the input event\n  // ie9 doesn't fire the input event when characters are removed\n  // not sure if ie10 is compatible\n\n\n  if (!_.isMsie()) {\n    this.$input.on('input.aa', onInput);\n  } else {\n    this.$input.on('keydown.aa keypress.aa cut.aa paste.aa', function ($e) {\n      // if a special key triggered this, ignore it\n      if (specialKeyCodeMap[$e.which || $e.keyCode]) {\n        return;\n      } // give the browser a chance to update the value of the input\n      // before checking to see if the query changed\n\n\n      _.defer(_.bind(that._onInput, that, $e));\n    });\n  } // the query defaults to whatever the value of the input is\n  // on initialization, it'll most likely be an empty string\n\n\n  this.query = this.$input.val(); // helps with calculating the width of the input's value\n\n  this.$overflowHelper = buildOverflowHelper(this.$input);\n} // static methods\n// --------------\n\n\nInput.normalizeQuery = function (str) {\n  // strips leading whitespace and condenses all whitespace\n  return (str || '').replace(/^\\s*/g, '').replace(/\\s{2,}/g, ' ');\n}; // instance methods\n// ----------------\n\n\n_.mixin(Input.prototype, EventEmitter, {\n  // ### private\n  _onBlur: function onBlur() {\n    this.resetInputValue();\n    this.$input.removeAttr('aria-activedescendant');\n    this.trigger('blurred');\n  },\n  _onFocus: function onFocus() {\n    this.trigger('focused');\n  },\n  _onKeydown: function onKeydown($e) {\n    // which is normalized and consistent (but not for ie)\n    var keyName = specialKeyCodeMap[$e.which || $e.keyCode];\n\n    this._managePreventDefault(keyName, $e);\n\n    if (keyName && this._shouldTrigger(keyName, $e)) {\n      this.trigger(keyName + 'Keyed', $e);\n    }\n  },\n  _onInput: function onInput() {\n    this._checkInputValue();\n  },\n  _managePreventDefault: function managePreventDefault(keyName, $e) {\n    var preventDefault;\n    var hintValue;\n    var inputValue;\n\n    switch (keyName) {\n      case 'tab':\n        hintValue = this.getHint();\n        inputValue = this.getInputValue();\n        preventDefault = hintValue && hintValue !== inputValue && !withModifier($e);\n        break;\n\n      case 'up':\n      case 'down':\n        preventDefault = !withModifier($e);\n        break;\n\n      default:\n        preventDefault = false;\n    }\n\n    if (preventDefault) {\n      $e.preventDefault();\n    }\n  },\n  _shouldTrigger: function shouldTrigger(keyName, $e) {\n    var trigger;\n\n    switch (keyName) {\n      case 'tab':\n        trigger = !withModifier($e);\n        break;\n\n      default:\n        trigger = true;\n    }\n\n    return trigger;\n  },\n  _checkInputValue: function checkInputValue() {\n    var inputValue;\n    var areEquivalent;\n    var hasDifferentWhitespace;\n    inputValue = this.getInputValue();\n    areEquivalent = areQueriesEquivalent(inputValue, this.query);\n    hasDifferentWhitespace = areEquivalent && this.query ? this.query.length !== inputValue.length : false;\n    this.query = inputValue;\n\n    if (!areEquivalent) {\n      this.trigger('queryChanged', this.query);\n    } else if (hasDifferentWhitespace) {\n      this.trigger('whitespaceChanged', this.query);\n    }\n  },\n  // ### public\n  focus: function focus() {\n    this.$input.focus();\n  },\n  blur: function blur() {\n    this.$input.blur();\n  },\n  getQuery: function getQuery() {\n    return this.query;\n  },\n  setQuery: function setQuery(query) {\n    this.query = query;\n  },\n  getInputValue: function getInputValue() {\n    return this.$input.val();\n  },\n  setInputValue: function setInputValue(value, silent) {\n    if (typeof value === 'undefined') {\n      value = this.query;\n    }\n\n    this.$input.val(value); // silent prevents any additional events from being triggered\n\n    if (silent) {\n      this.clearHint();\n    } else {\n      this._checkInputValue();\n    }\n  },\n  expand: function expand() {\n    this.$input.attr('aria-expanded', 'true');\n  },\n  collapse: function collapse() {\n    this.$input.attr('aria-expanded', 'false');\n  },\n  setActiveDescendant: function setActiveDescendant(activedescendantId) {\n    this.$input.attr('aria-activedescendant', activedescendantId);\n  },\n  removeActiveDescendant: function removeActiveDescendant() {\n    this.$input.removeAttr('aria-activedescendant');\n  },\n  resetInputValue: function resetInputValue() {\n    this.setInputValue(this.query, true);\n  },\n  getHint: function getHint() {\n    return this.$hint.val();\n  },\n  setHint: function setHint(value) {\n    this.$hint.val(value);\n  },\n  clearHint: function clearHint() {\n    this.setHint('');\n  },\n  clearHintIfInvalid: function clearHintIfInvalid() {\n    var val;\n    var hint;\n    var valIsPrefixOfHint;\n    var isValid;\n    val = this.getInputValue();\n    hint = this.getHint();\n    valIsPrefixOfHint = val !== hint && hint.indexOf(val) === 0;\n    isValid = val !== '' && valIsPrefixOfHint && !this.hasOverflow();\n\n    if (!isValid) {\n      this.clearHint();\n    }\n  },\n  getLanguageDirection: function getLanguageDirection() {\n    return (this.$input.css('direction') || 'ltr').toLowerCase();\n  },\n  hasOverflow: function hasOverflow() {\n    // 2 is arbitrary, just picking a small number to handle edge cases\n    var constraint = this.$input.width() - 2;\n    this.$overflowHelper.text(this.getInputValue());\n    return this.$overflowHelper.width() >= constraint;\n  },\n  isCursorAtEnd: function isCursorAtEnd() {\n    var valueLength;\n    var selectionStart;\n    var range;\n    valueLength = this.$input.val().length;\n    selectionStart = this.$input[0].selectionStart;\n\n    if (_.isNumber(selectionStart)) {\n      return selectionStart === valueLength;\n    } else if (document.selection) {\n      // NOTE: this won't work unless the input has focus, the good news\n      // is this code should only get called when the input has focus\n      range = document.selection.createRange();\n      range.moveStart('character', -valueLength);\n      return valueLength === range.text.length;\n    }\n\n    return true;\n  },\n  destroy: function destroy() {\n    this.$hint.off('.aa');\n    this.$input.off('.aa');\n    this.$hint = this.$input = this.$overflowHelper = null;\n  }\n}); // helper functions\n// ----------------\n\n\nfunction buildOverflowHelper($input) {\n  return DOM.element('<pre aria-hidden=\"true\"></pre>').css({\n    // position helper off-screen\n    position: 'absolute',\n    visibility: 'hidden',\n    // avoid line breaks and whitespace collapsing\n    whiteSpace: 'pre',\n    // use same font css as input to calculate accurate width\n    fontFamily: $input.css('font-family'),\n    fontSize: $input.css('font-size'),\n    fontStyle: $input.css('font-style'),\n    fontVariant: $input.css('font-variant'),\n    fontWeight: $input.css('font-weight'),\n    wordSpacing: $input.css('word-spacing'),\n    letterSpacing: $input.css('letter-spacing'),\n    textIndent: $input.css('text-indent'),\n    textRendering: $input.css('text-rendering'),\n    textTransform: $input.css('text-transform')\n  }).insertAfter($input);\n}\n\nfunction areQueriesEquivalent(a, b) {\n  return Input.normalizeQuery(a) === Input.normalizeQuery(b);\n}\n\nfunction withModifier($e) {\n  return $e.altKey || $e.ctrlKey || $e.metaKey || $e.shiftKey;\n}\n\nmodule.exports = Input;","map":null,"metadata":{},"sourceType":"script"}