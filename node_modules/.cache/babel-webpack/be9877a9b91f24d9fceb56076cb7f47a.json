{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport qs from 'qs';\n\nfunction defaultCreateURL(_ref) {\n  var qsModule = _ref.qsModule,\n      routeState = _ref.routeState,\n      location = _ref.location;\n  var protocol = location.protocol,\n      hostname = location.hostname,\n      _location$port = location.port,\n      port = _location$port === undefined ? '' : _location$port,\n      pathname = location.pathname,\n      hash = location.hash;\n  var queryString = qsModule.stringify(routeState);\n  var portWithPrefix = port === '' ? '' : ':' + port; // IE <= 11 has no location.origin or buggy. Therefore we don't rely on it\n\n  if (!routeState || Object.keys(routeState).length === 0) return protocol + '//' + hostname + portWithPrefix + pathname + hash;else return protocol + '//' + hostname + portWithPrefix + pathname + '?' + queryString + hash;\n}\n\nfunction defaultParseURL(_ref2) {\n  var qsModule = _ref2.qsModule,\n      location = _ref2.location; // `qs` by default converts arrays with more than 20 items to an object.\n  // We want to avoid this because the data structure manipulated can therefore vary.\n  // Setting the limit to `100` seems a good number because the engine's default is 100\n  // (it can go up to 1000 but it is very unlikely to select more than 100 items in the UI).\n  //\n  // Using an `arrayLimit` of `n` allows `n + 1` items.\n  //\n  // See:\n  //   - https://github.com/ljharb/qs#parsing-arrays\n  //   - https://www.algolia.com/doc/api-reference/api-parameters/maxValuesPerFacet/\n\n  return qsModule.parse(location.search.slice(1), {\n    arrayLimit: 99\n  });\n}\n\nvar BrowserHistory = function () {\n  /**\n   * Initializes a new storage provider that will sync the search state in the URL\n   * using web API (window.location.pushState and onpopstate event).\n   * @param {object} $0 the options.\n   * @param {function(object):string} [$0.windowTitle] function that transforms a UI state\n   * into a title for the page. It takes one parameter: a syncable object (generated by the mapping\n   * provided to the URL sync). It should return a string that will be the title.\n   * @param {number} [$0.writeDelay = 400] time before a write is actually done.\n   * Prevent having too much entries in the history and thus make the back button more friendly.\n   * @param {function(qs, object):string} [$0.createURL] generates the full URL. If not provided,\n   * the storage adaptor will mapped all syncable keys to the query string of the URL. The first\n   * parameter is a utility object that has two methods: `stringify` that creates a query string\n   * from an object and `parse` that transforms a query string into an object.\n   * @param {function(qs): object} [$0.parseURL] parses an URL into an object. It should symetrical\n   * to `createURL`. It gets as an argument an object that contains two methods: `stringify` that\n   * creates a query string from an object and `parse` that transforms a query string into an object.\n   */\n  function BrowserHistory() {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        windowTitle = _ref3.windowTitle,\n        _ref3$writeDelay = _ref3.writeDelay,\n        writeDelay = _ref3$writeDelay === undefined ? 400 : _ref3$writeDelay,\n        _ref3$createURL = _ref3.createURL,\n        createURL = _ref3$createURL === undefined ? defaultCreateURL : _ref3$createURL,\n        _ref3$parseURL = _ref3.parseURL,\n        parseURL = _ref3$parseURL === undefined ? defaultParseURL : _ref3$parseURL;\n\n    _classCallCheck(this, BrowserHistory);\n\n    this.windowTitle = windowTitle;\n    this.writeTimer = undefined;\n    this.writeDelay = writeDelay;\n    this._createURL = createURL;\n    this.parseURL = parseURL;\n  }\n  /**\n   * This method pushes a search state into the URL.\n   * @param {object} routeState a syncable UI state\n   * @return {undefined}\n   */\n\n\n  _createClass(BrowserHistory, [{\n    key: 'write',\n    value: function write(routeState) {\n      var _this = this;\n\n      var url = this.createURL(routeState);\n      var title = this.windowTitle && this.windowTitle(routeState);\n\n      if (this.writeTimer) {\n        window.clearTimeout(this.writeTimer);\n      }\n\n      this.writeTimer = setTimeout(function () {\n        if (title) window.document.title = title;\n        window.history.pushState(routeState, title || '', url);\n        _this.writeTimer = undefined;\n      }, this.writeDelay);\n    }\n    /**\n     * This methods read the URL and returns a syncable UI search state.\n     * @return {object} the equivalent to what is store in the URL as an object\n     */\n\n  }, {\n    key: 'read',\n    value: function read() {\n      return this.parseURL({\n        qsModule: qs,\n        location: window.location\n      });\n    }\n    /**\n     * This methods sets a callback on the `onpopstate` event of the history API\n     * of the current page. This way, the URL sync can keep track of the changes.\n     * @param {function(object)} cb the callback that will receive the latest routeState.\n     * It is called when the URL is updated.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'onUpdate',\n    value: function onUpdate(cb) {\n      var _this2 = this;\n\n      this._onPopState = function (event) {\n        if (_this2.writeTimer) {\n          window.clearTimeout(_this2.writeTimer);\n          _this2.writeTimer = undefined;\n        }\n\n        var routeState = event.state; // at initial load, the state is read from the URL without\n        // update. Therefore the state object is not there. In this\n        // case we fallback and read the URL.\n\n        if (!routeState) {\n          cb(_this2.read());\n        } else {\n          cb(routeState);\n        }\n      };\n\n      window.addEventListener('popstate', this._onPopState);\n    }\n    /**\n     * This method creates a complete URL from a given syncable UI state.\n     *\n     * It always generates the full url, not a relative one.\n     * This way we can handle cases like using a <base href>, see\n     * https://github.com/algolia/instantsearch.js/issues/790 for the original issue\n     *\n     * @param {object} routeState a syncable UI state\n     * @returns {string} the full URL for the provided syncable state\n     */\n\n  }, {\n    key: 'createURL',\n    value: function createURL(routeState) {\n      return this._createURL({\n        qsModule: qs,\n        routeState: routeState,\n        location: window.location\n      });\n    }\n    /**\n     * This method removes the event listener and cleans up the URL.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      window.removeEventListener('popstate', this._onPopState);\n      if (this.writeTimer) window.clearTimeout(this.writeTimer);\n      this.write();\n    }\n  }]);\n\n  return BrowserHistory;\n}();\n\nexport default function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return new (Function.prototype.bind.apply(BrowserHistory, [null].concat(args)))();\n}","map":null,"metadata":{},"sourceType":"module"}