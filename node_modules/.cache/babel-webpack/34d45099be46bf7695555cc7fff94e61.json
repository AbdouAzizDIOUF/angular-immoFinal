{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = formatHit;\n\nvar _findCountryCode = _interopRequireDefault(require(\"./findCountryCode\"));\n\nvar _findType = _interopRequireDefault(require(\"./findType\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getBestHighlightedForm(highlightedValues) {\n  var defaultValue = highlightedValues[0].value; // collect all other matches\n\n  var bestAttributes = [];\n\n  for (var i = 1; i < highlightedValues.length; ++i) {\n    if (highlightedValues[i].matchLevel !== 'none') {\n      bestAttributes.push({\n        index: i,\n        words: highlightedValues[i].matchedWords\n      });\n    }\n  } // no matches in this attribute, retrieve first value\n\n\n  if (bestAttributes.length === 0) {\n    return defaultValue;\n  } // sort the matches by `desc(words), asc(index)`\n\n\n  bestAttributes.sort(function (a, b) {\n    if (a.words > b.words) {\n      return -1;\n    } else if (a.words < b.words) {\n      return 1;\n    }\n\n    return a.index - b.index;\n  }); // and append the best match to the first value\n\n  return bestAttributes[0].index === 0 ? \"\".concat(defaultValue, \" (\").concat(highlightedValues[bestAttributes[1].index].value, \")\") : \"\".concat(highlightedValues[bestAttributes[0].index].value, \" (\").concat(defaultValue, \")\");\n}\n\nfunction getBestPostcode(postcodes, highlightedPostcodes) {\n  var defaultValue = highlightedPostcodes[0].value; // collect all other matches\n\n  var bestAttributes = [];\n\n  for (var i = 1; i < highlightedPostcodes.length; ++i) {\n    if (highlightedPostcodes[i].matchLevel !== 'none') {\n      bestAttributes.push({\n        index: i,\n        words: highlightedPostcodes[i].matchedWords\n      });\n    }\n  } // no matches in this attribute, retrieve first value\n\n\n  if (bestAttributes.length === 0) {\n    return {\n      postcode: postcodes[0],\n      highlightedPostcode: defaultValue\n    };\n  } // sort the matches by `desc(words)`\n\n\n  bestAttributes.sort(function (a, b) {\n    if (a.words > b.words) {\n      return -1;\n    } else if (a.words < b.words) {\n      return 1;\n    }\n\n    return a.index - b.index;\n  });\n  var postcode = postcodes[bestAttributes[0].index];\n  return {\n    postcode: postcode,\n    highlightedPostcode: highlightedPostcodes[bestAttributes[0].index].value\n  };\n}\n\nfunction formatHit(_ref) {\n  var formatInputValue = _ref.formatInputValue,\n      hit = _ref.hit,\n      hitIndex = _ref.hitIndex,\n      query = _ref.query,\n      rawAnswer = _ref.rawAnswer;\n\n  try {\n    var name = hit.locale_names[0];\n    var country = hit.country;\n    var administrative = hit.administrative && hit.administrative[0] !== name ? hit.administrative[0] : undefined;\n    var city = hit.city && hit.city[0] !== name ? hit.city[0] : undefined;\n    var suburb = hit.suburb && hit.suburb[0] !== name ? hit.suburb[0] : undefined;\n    var county = hit.county && hit.county[0] !== name ? hit.county[0] : undefined;\n\n    var _ref2 = hit.postcode && hit.postcode.length ? getBestPostcode(hit.postcode, hit._highlightResult.postcode) : {\n      postcode: undefined,\n      highlightedPostcode: undefined\n    },\n        postcode = _ref2.postcode,\n        highlightedPostcode = _ref2.highlightedPostcode;\n\n    var highlight = {\n      name: getBestHighlightedForm(hit._highlightResult.locale_names),\n      city: city ? getBestHighlightedForm(hit._highlightResult.city) : undefined,\n      administrative: administrative ? getBestHighlightedForm(hit._highlightResult.administrative) : undefined,\n      country: country ? hit._highlightResult.country.value : undefined,\n      suburb: suburb ? getBestHighlightedForm(hit._highlightResult.suburb) : undefined,\n      county: county ? getBestHighlightedForm(hit._highlightResult.county) : undefined,\n      postcode: highlightedPostcode\n    };\n    var suggestion = {\n      name: name,\n      administrative: administrative,\n      county: county,\n      city: city,\n      suburb: suburb,\n      country: country,\n      countryCode: (0, _findCountryCode[\"default\"])(hit._tags),\n      type: (0, _findType[\"default\"])(hit._tags),\n      latlng: {\n        lat: hit._geoloc.lat,\n        lng: hit._geoloc.lng\n      },\n      postcode: postcode,\n      postcodes: hit.postcode && hit.postcode.length ? hit.postcode : undefined\n    }; // this is the value to put inside the <input value=\n\n    var value = formatInputValue(suggestion);\n    return _objectSpread({}, suggestion, {\n      highlight: highlight,\n      hit: hit,\n      hitIndex: hitIndex,\n      query: query,\n      rawAnswer: rawAnswer,\n      value: value\n    });\n  } catch (e) {\n    /* eslint-disable no-console */\n    console.error('Could not parse object', hit);\n    console.error(e);\n    /* eslint-enable no-console */\n\n    return {\n      value: 'Could not parse object'\n    };\n  }\n}","map":{"version":3,"sources":["/media/diouf/Travail/Projets/projet web avance/angular/angularTest/node_modules/places.js/src/formatHit.js"],"names":["Object","defineProperty","exports","value","formatHit","_findCountryCode","_interopRequireDefault","require","_findType","obj","__esModule","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","configurable","writable","getBestHighlightedForm","highlightedValues","defaultValue","bestAttributes","matchLevel","push","index","words","matchedWords","sort","a","b","getBestPostcode","postcodes","highlightedPostcodes","postcode","highlightedPostcode","_ref","formatInputValue","hit","hitIndex","query","rawAnswer","name","locale_names","country","administrative","undefined","city","suburb","county","_ref2","_highlightResult","highlight","suggestion","countryCode","_tags","type","latlng","lat","_geoloc","lng","e","console","error"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = formatHit;\n\nvar _findCountryCode = _interopRequireDefault(require(\"./findCountryCode\"));\n\nvar _findType = _interopRequireDefault(require(\"./findType\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction getBestHighlightedForm(highlightedValues) {\n  var defaultValue = highlightedValues[0].value; // collect all other matches\n\n  var bestAttributes = [];\n\n  for (var i = 1; i < highlightedValues.length; ++i) {\n    if (highlightedValues[i].matchLevel !== 'none') {\n      bestAttributes.push({\n        index: i,\n        words: highlightedValues[i].matchedWords\n      });\n    }\n  } // no matches in this attribute, retrieve first value\n\n\n  if (bestAttributes.length === 0) {\n    return defaultValue;\n  } // sort the matches by `desc(words), asc(index)`\n\n\n  bestAttributes.sort(function (a, b) {\n    if (a.words > b.words) {\n      return -1;\n    } else if (a.words < b.words) {\n      return 1;\n    }\n\n    return a.index - b.index;\n  }); // and append the best match to the first value\n\n  return bestAttributes[0].index === 0 ? \"\".concat(defaultValue, \" (\").concat(highlightedValues[bestAttributes[1].index].value, \")\") : \"\".concat(highlightedValues[bestAttributes[0].index].value, \" (\").concat(defaultValue, \")\");\n}\n\nfunction getBestPostcode(postcodes, highlightedPostcodes) {\n  var defaultValue = highlightedPostcodes[0].value; // collect all other matches\n\n  var bestAttributes = [];\n\n  for (var i = 1; i < highlightedPostcodes.length; ++i) {\n    if (highlightedPostcodes[i].matchLevel !== 'none') {\n      bestAttributes.push({\n        index: i,\n        words: highlightedPostcodes[i].matchedWords\n      });\n    }\n  } // no matches in this attribute, retrieve first value\n\n\n  if (bestAttributes.length === 0) {\n    return {\n      postcode: postcodes[0],\n      highlightedPostcode: defaultValue\n    };\n  } // sort the matches by `desc(words)`\n\n\n  bestAttributes.sort(function (a, b) {\n    if (a.words > b.words) {\n      return -1;\n    } else if (a.words < b.words) {\n      return 1;\n    }\n\n    return a.index - b.index;\n  });\n  var postcode = postcodes[bestAttributes[0].index];\n  return {\n    postcode: postcode,\n    highlightedPostcode: highlightedPostcodes[bestAttributes[0].index].value\n  };\n}\n\nfunction formatHit(_ref) {\n  var formatInputValue = _ref.formatInputValue,\n      hit = _ref.hit,\n      hitIndex = _ref.hitIndex,\n      query = _ref.query,\n      rawAnswer = _ref.rawAnswer;\n\n  try {\n    var name = hit.locale_names[0];\n    var country = hit.country;\n    var administrative = hit.administrative && hit.administrative[0] !== name ? hit.administrative[0] : undefined;\n    var city = hit.city && hit.city[0] !== name ? hit.city[0] : undefined;\n    var suburb = hit.suburb && hit.suburb[0] !== name ? hit.suburb[0] : undefined;\n    var county = hit.county && hit.county[0] !== name ? hit.county[0] : undefined;\n\n    var _ref2 = hit.postcode && hit.postcode.length ? getBestPostcode(hit.postcode, hit._highlightResult.postcode) : {\n      postcode: undefined,\n      highlightedPostcode: undefined\n    },\n        postcode = _ref2.postcode,\n        highlightedPostcode = _ref2.highlightedPostcode;\n\n    var highlight = {\n      name: getBestHighlightedForm(hit._highlightResult.locale_names),\n      city: city ? getBestHighlightedForm(hit._highlightResult.city) : undefined,\n      administrative: administrative ? getBestHighlightedForm(hit._highlightResult.administrative) : undefined,\n      country: country ? hit._highlightResult.country.value : undefined,\n      suburb: suburb ? getBestHighlightedForm(hit._highlightResult.suburb) : undefined,\n      county: county ? getBestHighlightedForm(hit._highlightResult.county) : undefined,\n      postcode: highlightedPostcode\n    };\n    var suggestion = {\n      name: name,\n      administrative: administrative,\n      county: county,\n      city: city,\n      suburb: suburb,\n      country: country,\n      countryCode: (0, _findCountryCode[\"default\"])(hit._tags),\n      type: (0, _findType[\"default\"])(hit._tags),\n      latlng: {\n        lat: hit._geoloc.lat,\n        lng: hit._geoloc.lng\n      },\n      postcode: postcode,\n      postcodes: hit.postcode && hit.postcode.length ? hit.postcode : undefined\n    }; // this is the value to put inside the <input value=\n\n    var value = formatInputValue(suggestion);\n    return _objectSpread({}, suggestion, {\n      highlight: highlight,\n      hit: hit,\n      hitIndex: hitIndex,\n      query: query,\n      rawAnswer: rawAnswer,\n      value: value\n    });\n  } catch (e) {\n    /* eslint-disable no-console */\n    console.error('Could not parse object', hit);\n    console.error(e);\n    /* eslint-enable no-console */\n\n    return {\n      value: 'Could not parse object'\n    };\n  }\n}"]},"metadata":{},"sourceType":"script"}