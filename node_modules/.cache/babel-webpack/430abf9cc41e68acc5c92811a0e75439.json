{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport range from 'lodash/range';\n\nvar Paginator = function () {\n  function Paginator(params) {\n    _classCallCheck(this, Paginator);\n\n    this.currentPage = params.currentPage;\n    this.total = params.total;\n    this.padding = params.padding;\n  }\n\n  _createClass(Paginator, [{\n    key: 'pages',\n    value: function pages() {\n      var total = this.total,\n          currentPage = this.currentPage,\n          padding = this.padding;\n      if (total === 0) return [0];\n      var totalDisplayedPages = this.nbPagesDisplayed(padding, total);\n      if (totalDisplayedPages === total) return range(0, total);\n      var paddingLeft = this.calculatePaddingLeft(currentPage, padding, total, totalDisplayedPages);\n      var paddingRight = totalDisplayedPages - paddingLeft;\n      var first = currentPage - paddingLeft;\n      var last = currentPage + paddingRight;\n      return range(first, last);\n    }\n  }, {\n    key: 'nbPagesDisplayed',\n    value: function nbPagesDisplayed(padding, total) {\n      return Math.min(2 * padding + 1, total);\n    }\n  }, {\n    key: 'calculatePaddingLeft',\n    value: function calculatePaddingLeft(current, padding, total, totalDisplayedPages) {\n      if (current <= padding) {\n        return current;\n      }\n\n      if (current >= total - padding) {\n        return totalDisplayedPages - (total - current);\n      }\n\n      return padding;\n    }\n  }, {\n    key: 'isLastPage',\n    value: function isLastPage() {\n      return this.currentPage === this.total - 1;\n    }\n  }, {\n    key: 'isFirstPage',\n    value: function isFirstPage() {\n      return this.currentPage === 0;\n    }\n  }]);\n\n  return Paginator;\n}();\n\nexport default Paginator;","map":null,"metadata":{},"sourceType":"module"}