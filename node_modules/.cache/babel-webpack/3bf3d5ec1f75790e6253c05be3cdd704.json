{"ast":null,"code":"'use strict';\n\nvar attrsKey = 'aaAttrs';\n\nvar _ = require('../common/utils.js');\n\nvar DOM = require('../common/dom.js');\n\nvar EventBus = require('./event_bus.js');\n\nvar Input = require('./input.js');\n\nvar Dropdown = require('./dropdown.js');\n\nvar html = require('./html.js');\n\nvar css = require('./css.js'); // constructor\n// -----------\n// THOUGHT: what if datasets could dynamically be added/removed?\n\n\nfunction Typeahead(o) {\n  var $menu;\n  var $hint;\n  o = o || {};\n\n  if (!o.input) {\n    _.error('missing input');\n  }\n\n  this.isActivated = false;\n  this.debug = !!o.debug;\n  this.autoselect = !!o.autoselect;\n  this.autoselectOnBlur = !!o.autoselectOnBlur;\n  this.openOnFocus = !!o.openOnFocus;\n  this.minLength = _.isNumber(o.minLength) ? o.minLength : 1;\n  this.autoWidth = o.autoWidth === undefined ? true : !!o.autoWidth;\n  this.clearOnSelected = !!o.clearOnSelected;\n  this.tabAutocomplete = o.tabAutocomplete === undefined ? true : !!o.tabAutocomplete;\n  o.hint = !!o.hint;\n\n  if (o.hint && o.appendTo) {\n    throw new Error('[autocomplete.js] hint and appendTo options can\\'t be used at the same time');\n  }\n\n  this.css = o.css = _.mixin({}, css, o.appendTo ? css.appendTo : {});\n  this.cssClasses = o.cssClasses = _.mixin({}, css.defaultClasses, o.cssClasses || {});\n  this.cssClasses.prefix = o.cssClasses.formattedPrefix = _.formatPrefix(this.cssClasses.prefix, this.cssClasses.noPrefix);\n  this.listboxId = o.listboxId = [this.cssClasses.root, 'listbox', _.getUniqueId()].join('-');\n  var domElts = buildDom(o);\n  this.$node = domElts.wrapper;\n  var $input = this.$input = domElts.input;\n  $menu = domElts.menu;\n  $hint = domElts.hint;\n\n  if (o.dropdownMenuContainer) {\n    DOM.element(o.dropdownMenuContainer).css('position', 'relative') // ensure the container has a relative position\n    .append($menu.css('top', '0')); // override the top: 100%\n  } // #705: if there's scrollable overflow, ie doesn't support\n  // blur cancellations when the scrollbar is clicked\n  //\n  // #351: preventDefault won't cancel blurs in ie <= 8\n\n\n  $input.on('blur.aa', function ($e) {\n    var active = document.activeElement;\n\n    if (_.isMsie() && ($menu[0] === active || $menu[0].contains(active))) {\n      $e.preventDefault(); // stop immediate in order to prevent Input#_onBlur from\n      // getting exectued\n\n      $e.stopImmediatePropagation();\n\n      _.defer(function () {\n        $input.focus();\n      });\n    }\n  }); // #351: prevents input blur due to clicks within dropdown menu\n\n  $menu.on('mousedown.aa', function ($e) {\n    $e.preventDefault();\n  });\n  this.eventBus = o.eventBus || new EventBus({\n    el: $input\n  });\n  this.dropdown = new Typeahead.Dropdown({\n    appendTo: o.appendTo,\n    wrapper: this.$node,\n    menu: $menu,\n    datasets: o.datasets,\n    templates: o.templates,\n    cssClasses: o.cssClasses,\n    minLength: this.minLength\n  }).onSync('suggestionClicked', this._onSuggestionClicked, this).onSync('cursorMoved', this._onCursorMoved, this).onSync('cursorRemoved', this._onCursorRemoved, this).onSync('opened', this._onOpened, this).onSync('closed', this._onClosed, this).onSync('shown', this._onShown, this).onSync('empty', this._onEmpty, this).onSync('redrawn', this._onRedrawn, this).onAsync('datasetRendered', this._onDatasetRendered, this);\n  this.input = new Typeahead.Input({\n    input: $input,\n    hint: $hint\n  }).onSync('focused', this._onFocused, this).onSync('blurred', this._onBlurred, this).onSync('enterKeyed', this._onEnterKeyed, this).onSync('tabKeyed', this._onTabKeyed, this).onSync('escKeyed', this._onEscKeyed, this).onSync('upKeyed', this._onUpKeyed, this).onSync('downKeyed', this._onDownKeyed, this).onSync('leftKeyed', this._onLeftKeyed, this).onSync('rightKeyed', this._onRightKeyed, this).onSync('queryChanged', this._onQueryChanged, this).onSync('whitespaceChanged', this._onWhitespaceChanged, this);\n\n  this._bindKeyboardShortcuts(o);\n\n  this._setLanguageDirection();\n} // instance methods\n// ----------------\n\n\n_.mixin(Typeahead.prototype, {\n  // ### private\n  _bindKeyboardShortcuts: function _bindKeyboardShortcuts(options) {\n    if (!options.keyboardShortcuts) {\n      return;\n    }\n\n    var $input = this.$input;\n    var keyboardShortcuts = [];\n\n    _.each(options.keyboardShortcuts, function (key) {\n      if (typeof key === 'string') {\n        key = key.toUpperCase().charCodeAt(0);\n      }\n\n      keyboardShortcuts.push(key);\n    });\n\n    DOM.element(document).keydown(function (event) {\n      var elt = event.target || event.srcElement;\n      var tagName = elt.tagName;\n\n      if (elt.isContentEditable || tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA') {\n        // already in an input\n        return;\n      }\n\n      var which = event.which || event.keyCode;\n\n      if (keyboardShortcuts.indexOf(which) === -1) {\n        // not the right shortcut\n        return;\n      }\n\n      $input.focus();\n      event.stopPropagation();\n      event.preventDefault();\n    });\n  },\n  _onSuggestionClicked: function onSuggestionClicked(type, $el) {\n    var datum;\n    var context = {\n      selectionMethod: 'click'\n    };\n\n    if (datum = this.dropdown.getDatumForSuggestion($el)) {\n      this._select(datum, context);\n    }\n  },\n  _onCursorMoved: function onCursorMoved(event, updateInput) {\n    var datum = this.dropdown.getDatumForCursor();\n    var currentCursorId = this.dropdown.getCurrentCursor().attr('id');\n    this.input.setActiveDescendant(currentCursorId);\n\n    if (datum) {\n      if (updateInput) {\n        this.input.setInputValue(datum.value, true);\n      }\n\n      this.eventBus.trigger('cursorchanged', datum.raw, datum.datasetName);\n    }\n  },\n  _onCursorRemoved: function onCursorRemoved() {\n    this.input.resetInputValue();\n\n    this._updateHint();\n\n    this.eventBus.trigger('cursorremoved');\n  },\n  _onDatasetRendered: function onDatasetRendered() {\n    this._updateHint();\n\n    this.eventBus.trigger('updated');\n  },\n  _onOpened: function onOpened() {\n    this._updateHint();\n\n    this.input.expand();\n    this.eventBus.trigger('opened');\n  },\n  _onEmpty: function onEmpty() {\n    this.eventBus.trigger('empty');\n  },\n  _onRedrawn: function onRedrawn() {\n    this.$node.css('top', 0 + 'px');\n    this.$node.css('left', 0 + 'px');\n    var inputRect = this.$input[0].getBoundingClientRect();\n\n    if (this.autoWidth) {\n      this.$node.css('width', inputRect.width + 'px');\n    }\n\n    var wrapperRect = this.$node[0].getBoundingClientRect();\n    var top = inputRect.bottom - wrapperRect.top;\n    this.$node.css('top', top + 'px');\n    var left = inputRect.left - wrapperRect.left;\n    this.$node.css('left', left + 'px');\n    this.eventBus.trigger('redrawn');\n  },\n  _onShown: function onShown() {\n    this.eventBus.trigger('shown');\n\n    if (this.autoselect) {\n      this.dropdown.cursorTopSuggestion();\n    }\n  },\n  _onClosed: function onClosed() {\n    this.input.clearHint();\n    this.input.removeActiveDescendant();\n    this.input.collapse();\n    this.eventBus.trigger('closed');\n  },\n  _onFocused: function onFocused() {\n    this.isActivated = true;\n\n    if (this.openOnFocus) {\n      var query = this.input.getQuery();\n\n      if (query.length >= this.minLength) {\n        this.dropdown.update(query);\n      } else {\n        this.dropdown.empty();\n      }\n\n      this.dropdown.open();\n    }\n  },\n  _onBlurred: function onBlurred() {\n    var cursorDatum;\n    var topSuggestionDatum;\n    cursorDatum = this.dropdown.getDatumForCursor();\n    topSuggestionDatum = this.dropdown.getDatumForTopSuggestion();\n    var context = {\n      selectionMethod: 'blur'\n    };\n\n    if (!this.debug) {\n      if (this.autoselectOnBlur && cursorDatum) {\n        this._select(cursorDatum, context);\n      } else if (this.autoselectOnBlur && topSuggestionDatum) {\n        this._select(topSuggestionDatum, context);\n      } else {\n        this.isActivated = false;\n        this.dropdown.empty();\n        this.dropdown.close();\n      }\n    }\n  },\n  _onEnterKeyed: function onEnterKeyed(type, $e) {\n    var cursorDatum;\n    var topSuggestionDatum;\n    cursorDatum = this.dropdown.getDatumForCursor();\n    topSuggestionDatum = this.dropdown.getDatumForTopSuggestion();\n    var context = {\n      selectionMethod: 'enterKey'\n    };\n\n    if (cursorDatum) {\n      this._select(cursorDatum, context);\n\n      $e.preventDefault();\n    } else if (this.autoselect && topSuggestionDatum) {\n      this._select(topSuggestionDatum, context);\n\n      $e.preventDefault();\n    }\n  },\n  _onTabKeyed: function onTabKeyed(type, $e) {\n    if (!this.tabAutocomplete) {\n      // Closing the dropdown enables further tabbing\n      this.dropdown.close();\n      return;\n    }\n\n    var datum;\n    var context = {\n      selectionMethod: 'tabKey'\n    };\n\n    if (datum = this.dropdown.getDatumForCursor()) {\n      this._select(datum, context);\n\n      $e.preventDefault();\n    } else {\n      this._autocomplete(true);\n    }\n  },\n  _onEscKeyed: function onEscKeyed() {\n    this.dropdown.close();\n    this.input.resetInputValue();\n  },\n  _onUpKeyed: function onUpKeyed() {\n    var query = this.input.getQuery();\n\n    if (this.dropdown.isEmpty && query.length >= this.minLength) {\n      this.dropdown.update(query);\n    } else {\n      this.dropdown.moveCursorUp();\n    }\n\n    this.dropdown.open();\n  },\n  _onDownKeyed: function onDownKeyed() {\n    var query = this.input.getQuery();\n\n    if (this.dropdown.isEmpty && query.length >= this.minLength) {\n      this.dropdown.update(query);\n    } else {\n      this.dropdown.moveCursorDown();\n    }\n\n    this.dropdown.open();\n  },\n  _onLeftKeyed: function onLeftKeyed() {\n    if (this.dir === 'rtl') {\n      this._autocomplete();\n    }\n  },\n  _onRightKeyed: function onRightKeyed() {\n    if (this.dir === 'ltr') {\n      this._autocomplete();\n    }\n  },\n  _onQueryChanged: function onQueryChanged(e, query) {\n    this.input.clearHintIfInvalid();\n\n    if (query.length >= this.minLength) {\n      this.dropdown.update(query);\n    } else {\n      this.dropdown.empty();\n    }\n\n    this.dropdown.open();\n\n    this._setLanguageDirection();\n  },\n  _onWhitespaceChanged: function onWhitespaceChanged() {\n    this._updateHint();\n\n    this.dropdown.open();\n  },\n  _setLanguageDirection: function setLanguageDirection() {\n    var dir = this.input.getLanguageDirection();\n\n    if (this.dir !== dir) {\n      this.dir = dir;\n      this.$node.css('direction', dir);\n      this.dropdown.setLanguageDirection(dir);\n    }\n  },\n  _updateHint: function updateHint() {\n    var datum;\n    var val;\n    var query;\n    var escapedQuery;\n    var frontMatchRegEx;\n    var match;\n    datum = this.dropdown.getDatumForTopSuggestion();\n\n    if (datum && this.dropdown.isVisible() && !this.input.hasOverflow()) {\n      val = this.input.getInputValue();\n      query = Input.normalizeQuery(val);\n      escapedQuery = _.escapeRegExChars(query); // match input value, then capture trailing text\n\n      frontMatchRegEx = new RegExp('^(?:' + escapedQuery + ')(.+$)', 'i');\n      match = frontMatchRegEx.exec(datum.value); // clear hint if there's no trailing text\n\n      if (match) {\n        this.input.setHint(val + match[1]);\n      } else {\n        this.input.clearHint();\n      }\n    } else {\n      this.input.clearHint();\n    }\n  },\n  _autocomplete: function autocomplete(laxCursor) {\n    var hint;\n    var query;\n    var isCursorAtEnd;\n    var datum;\n    hint = this.input.getHint();\n    query = this.input.getQuery();\n    isCursorAtEnd = laxCursor || this.input.isCursorAtEnd();\n\n    if (hint && query !== hint && isCursorAtEnd) {\n      datum = this.dropdown.getDatumForTopSuggestion();\n\n      if (datum) {\n        this.input.setInputValue(datum.value);\n      }\n\n      this.eventBus.trigger('autocompleted', datum.raw, datum.datasetName);\n    }\n  },\n  _select: function select(datum, context) {\n    if (typeof datum.value !== 'undefined') {\n      this.input.setQuery(datum.value);\n    }\n\n    if (this.clearOnSelected) {\n      this.setVal('');\n    } else {\n      this.input.setInputValue(datum.value, true);\n    }\n\n    this._setLanguageDirection();\n\n    var event = this.eventBus.trigger('selected', datum.raw, datum.datasetName, context);\n\n    if (event.isDefaultPrevented() === false) {\n      this.dropdown.close(); // #118: allow click event to bubble up to the body before removing\n      // the suggestions otherwise we break event delegation\n\n      _.defer(_.bind(this.dropdown.empty, this.dropdown));\n    }\n  },\n  // ### public\n  open: function open() {\n    // if the menu is not activated yet, we need to update\n    // the underlying dropdown menu to trigger the search\n    // otherwise we're not gonna see anything\n    if (!this.isActivated) {\n      var query = this.input.getInputValue();\n\n      if (query.length >= this.minLength) {\n        this.dropdown.update(query);\n      } else {\n        this.dropdown.empty();\n      }\n    }\n\n    this.dropdown.open();\n  },\n  close: function close() {\n    this.dropdown.close();\n  },\n  setVal: function setVal(val) {\n    // expect val to be a string, so be safe, and coerce\n    val = _.toStr(val);\n\n    if (this.isActivated) {\n      this.input.setInputValue(val);\n    } else {\n      this.input.setQuery(val);\n      this.input.setInputValue(val, true);\n    }\n\n    this._setLanguageDirection();\n  },\n  getVal: function getVal() {\n    return this.input.getQuery();\n  },\n  destroy: function destroy() {\n    this.input.destroy();\n    this.dropdown.destroy();\n    destroyDomStructure(this.$node, this.cssClasses);\n    this.$node = null;\n  },\n  getWrapper: function getWrapper() {\n    return this.dropdown.$container[0];\n  }\n});\n\nfunction buildDom(options) {\n  var $input;\n  var $wrapper;\n  var $dropdown;\n  var $hint;\n  $input = DOM.element(options.input);\n  $wrapper = DOM.element(html.wrapper.replace('%ROOT%', options.cssClasses.root)).css(options.css.wrapper); // override the display property with the table-cell value\n  // if the parent element is a table and the original input was a block\n  //  -> https://github.com/algolia/autocomplete.js/issues/16\n\n  if (!options.appendTo && $input.css('display') === 'block' && $input.parent().css('display') === 'table') {\n    $wrapper.css('display', 'table-cell');\n  }\n\n  var dropdownHtml = html.dropdown.replace('%PREFIX%', options.cssClasses.prefix).replace('%DROPDOWN_MENU%', options.cssClasses.dropdownMenu);\n  $dropdown = DOM.element(dropdownHtml).css(options.css.dropdown).attr({\n    role: 'listbox',\n    id: options.listboxId\n  });\n\n  if (options.templates && options.templates.dropdownMenu) {\n    $dropdown.html(_.templatify(options.templates.dropdownMenu)());\n  }\n\n  $hint = $input.clone().css(options.css.hint).css(getBackgroundStyles($input));\n  $hint.val('').addClass(_.className(options.cssClasses.prefix, options.cssClasses.hint, true)).removeAttr('id name placeholder required').prop('readonly', true).attr({\n    'aria-hidden': 'true',\n    autocomplete: 'off',\n    spellcheck: 'false',\n    tabindex: -1\n  });\n\n  if ($hint.removeData) {\n    $hint.removeData();\n  } // store the original values of the attrs that get modified\n  // so modifications can be reverted on destroy\n\n\n  $input.data(attrsKey, {\n    'aria-autocomplete': $input.attr('aria-autocomplete'),\n    'aria-expanded': $input.attr('aria-expanded'),\n    'aria-owns': $input.attr('aria-owns'),\n    autocomplete: $input.attr('autocomplete'),\n    dir: $input.attr('dir'),\n    role: $input.attr('role'),\n    spellcheck: $input.attr('spellcheck'),\n    style: $input.attr('style'),\n    type: $input.attr('type')\n  });\n  $input.addClass(_.className(options.cssClasses.prefix, options.cssClasses.input, true)).attr({\n    autocomplete: 'off',\n    spellcheck: false,\n    // Accessibility features\n    // Give the field a presentation of a \"select\".\n    // Combobox is the combined presentation of a single line textfield\n    // with a listbox popup.\n    // https://www.w3.org/WAI/PF/aria/roles#combobox\n    role: 'combobox',\n    // Let the screen reader know the field has an autocomplete\n    // feature to it.\n    'aria-autocomplete': options.datasets && options.datasets[0] && options.datasets[0].displayKey ? 'both' : 'list',\n    // Indicates whether the dropdown it controls is currently expanded or collapsed\n    'aria-expanded': 'false',\n    'aria-label': options.ariaLabel,\n    // Explicitly point to the listbox,\n    // which is a list of suggestions (aka options)\n    'aria-owns': options.listboxId\n  }).css(options.hint ? options.css.input : options.css.inputWithNoHint); // ie7 does not like it when dir is set to auto\n\n  try {\n    if (!$input.attr('dir')) {\n      $input.attr('dir', 'auto');\n    }\n  } catch (e) {// ignore\n  }\n\n  $wrapper = options.appendTo ? $wrapper.appendTo(DOM.element(options.appendTo).eq(0)).eq(0) : $input.wrap($wrapper).parent();\n  $wrapper.prepend(options.hint ? $hint : null).append($dropdown);\n  return {\n    wrapper: $wrapper,\n    input: $input,\n    hint: $hint,\n    menu: $dropdown\n  };\n}\n\nfunction getBackgroundStyles($el) {\n  return {\n    backgroundAttachment: $el.css('background-attachment'),\n    backgroundClip: $el.css('background-clip'),\n    backgroundColor: $el.css('background-color'),\n    backgroundImage: $el.css('background-image'),\n    backgroundOrigin: $el.css('background-origin'),\n    backgroundPosition: $el.css('background-position'),\n    backgroundRepeat: $el.css('background-repeat'),\n    backgroundSize: $el.css('background-size')\n  };\n}\n\nfunction destroyDomStructure($node, cssClasses) {\n  var $input = $node.find(_.className(cssClasses.prefix, cssClasses.input)); // need to remove attrs that weren't previously defined and\n  // revert attrs that originally had a value\n\n  _.each($input.data(attrsKey), function (val, key) {\n    if (val === undefined) {\n      $input.removeAttr(key);\n    } else {\n      $input.attr(key, val);\n    }\n  });\n\n  $input.detach().removeClass(_.className(cssClasses.prefix, cssClasses.input, true)).insertAfter($node);\n\n  if ($input.removeData) {\n    $input.removeData(attrsKey);\n  }\n\n  $node.remove();\n}\n\nTypeahead.Dropdown = Dropdown;\nTypeahead.Input = Input;\nTypeahead.sources = require('../sources/index.js');\nmodule.exports = Typeahead;","map":null,"metadata":{},"sourceType":"script"}