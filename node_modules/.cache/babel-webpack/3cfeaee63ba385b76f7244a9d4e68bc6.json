{"ast":null,"code":"'use strict';\n\nvar _ = require('../common/utils.js');\n\nvar version = require('../../version.js');\n\nvar parseAlgoliaClientVersion = require('../common/parseAlgoliaClientVersion.js');\n\nmodule.exports = function popularIn(index, params, details, options) {\n  var algoliaVersion = parseAlgoliaClientVersion(index.as._ua);\n\n  if (algoliaVersion && algoliaVersion[0] >= 3 && algoliaVersion[1] > 20) {\n    params = params || {};\n    params.additionalUA = 'autocomplete.js ' + version;\n  }\n\n  if (!details.source) {\n    return _.error(\"Missing 'source' key\");\n  }\n\n  var source = _.isFunction(details.source) ? details.source : function (hit) {\n    return hit[details.source];\n  };\n\n  if (!details.index) {\n    return _.error(\"Missing 'index' key\");\n  }\n\n  var detailsIndex = details.index;\n  options = options || {};\n  return sourceFn;\n\n  function sourceFn(query, cb) {\n    index.search(query, params, function (error, content) {\n      if (error) {\n        _.error(error.message);\n\n        return;\n      }\n\n      if (content.hits.length > 0) {\n        var first = content.hits[0];\n\n        var detailsParams = _.mixin({\n          hitsPerPage: 0\n        }, details);\n\n        delete detailsParams.source; // not a query parameter\n\n        delete detailsParams.index; // not a query parameter\n\n        var detailsAlgoliaVersion = parseAlgoliaClientVersion(detailsIndex.as._ua);\n\n        if (detailsAlgoliaVersion && detailsAlgoliaVersion[0] >= 3 && detailsAlgoliaVersion[1] > 20) {\n          params.additionalUA = 'autocomplete.js ' + version;\n        }\n\n        detailsIndex.search(source(first), detailsParams, function (error2, content2) {\n          if (error2) {\n            _.error(error2.message);\n\n            return;\n          }\n\n          var suggestions = []; // add the 'all department' entry before others\n\n          if (options.includeAll) {\n            var label = options.allTitle || 'All departments';\n            suggestions.push(_.mixin({\n              facet: {\n                value: label,\n                count: content2.nbHits\n              }\n            }, _.cloneDeep(first)));\n          } // enrich the first hit iterating over the facets\n\n\n          _.each(content2.facets, function (values, facet) {\n            _.each(values, function (count, value) {\n              suggestions.push(_.mixin({\n                facet: {\n                  facet: facet,\n                  value: value,\n                  count: count\n                }\n              }, _.cloneDeep(first)));\n            });\n          }); // append all other hits\n\n\n          for (var i = 1; i < content.hits.length; ++i) {\n            suggestions.push(content.hits[i]);\n          }\n\n          cb(suggestions, content);\n        });\n        return;\n      }\n\n      cb([]);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}